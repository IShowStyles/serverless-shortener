{
  "version": 3,
  "sources": ["../node_modules/dotenv/package.json", "../node_modules/dotenv/lib/main.js", "../src/deactivated.ts", "../src/common/env/index.ts", "../src/common/db/aws.ts"],
  "sourcesContent": ["{\n  \"name\": \"dotenv\",\n  \"version\": \"16.3.1\",\n  \"description\": \"Loads environment variables from .env file\",\n  \"main\": \"lib/main.js\",\n  \"types\": \"lib/main.d.ts\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./lib/main.d.ts\",\n      \"require\": \"./lib/main.js\",\n      \"default\": \"./lib/main.js\"\n    },\n    \"./config\": \"./config.js\",\n    \"./config.js\": \"./config.js\",\n    \"./lib/env-options\": \"./lib/env-options.js\",\n    \"./lib/env-options.js\": \"./lib/env-options.js\",\n    \"./lib/cli-options\": \"./lib/cli-options.js\",\n    \"./lib/cli-options.js\": \"./lib/cli-options.js\",\n    \"./package.json\": \"./package.json\"\n  },\n  \"scripts\": {\n    \"dts-check\": \"tsc --project tests/types/tsconfig.json\",\n    \"lint\": \"standard\",\n    \"lint-readme\": \"standard-markdown\",\n    \"pretest\": \"npm run lint && npm run dts-check\",\n    \"test\": \"tap tests/*.js --100 -Rspec\",\n    \"prerelease\": \"npm test\",\n    \"release\": \"standard-version\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/motdotla/dotenv.git\"\n  },\n  \"funding\": \"https://github.com/motdotla/dotenv?sponsor=1\",\n  \"keywords\": [\n    \"dotenv\",\n    \"env\",\n    \".env\",\n    \"environment\",\n    \"variables\",\n    \"config\",\n    \"settings\"\n  ],\n  \"readmeFilename\": \"README.md\",\n  \"license\": \"BSD-2-Clause\",\n  \"devDependencies\": {\n    \"@definitelytyped/dtslint\": \"^0.0.133\",\n    \"@types/node\": \"^18.11.3\",\n    \"decache\": \"^4.6.1\",\n    \"sinon\": \"^14.0.1\",\n    \"standard\": \"^17.0.0\",\n    \"standard-markdown\": \"^7.1.0\",\n    \"standard-version\": \"^9.5.0\",\n    \"tap\": \"^16.3.0\",\n    \"tar\": \"^6.1.11\",\n    \"typescript\": \"^4.8.4\"\n  },\n  \"engines\": {\n    \"node\": \">=12\"\n  },\n  \"browser\": {\n    \"fs\": false\n  }\n}\n", "const fs = require('fs')\nconst path = require('path')\nconst os = require('os')\nconst crypto = require('crypto')\nconst packageJson = require('../package.json')\n\nconst version = packageJson.version\n\nconst LINE = /(?:^|^)\\s*(?:export\\s+)?([\\w.-]+)(?:\\s*=\\s*?|:\\s+?)(\\s*'(?:\\\\'|[^'])*'|\\s*\"(?:\\\\\"|[^\"])*\"|\\s*`(?:\\\\`|[^`])*`|[^#\\r\\n]+)?\\s*(?:#.*)?(?:$|$)/mg\n\n// Parse src into an Object\nfunction parse (src) {\n  const obj = {}\n\n  // Convert buffer to string\n  let lines = src.toString()\n\n  // Convert line breaks to same format\n  lines = lines.replace(/\\r\\n?/mg, '\\n')\n\n  let match\n  while ((match = LINE.exec(lines)) != null) {\n    const key = match[1]\n\n    // Default undefined or null to empty string\n    let value = (match[2] || '')\n\n    // Remove whitespace\n    value = value.trim()\n\n    // Check if double quoted\n    const maybeQuote = value[0]\n\n    // Remove surrounding quotes\n    value = value.replace(/^(['\"`])([\\s\\S]*)\\1$/mg, '$2')\n\n    // Expand newlines if double quoted\n    if (maybeQuote === '\"') {\n      value = value.replace(/\\\\n/g, '\\n')\n      value = value.replace(/\\\\r/g, '\\r')\n    }\n\n    // Add to object\n    obj[key] = value\n  }\n\n  return obj\n}\n\nfunction _parseVault (options) {\n  const vaultPath = _vaultPath(options)\n\n  // Parse .env.vault\n  const result = DotenvModule.configDotenv({ path: vaultPath })\n  if (!result.parsed) {\n    throw new Error(`MISSING_DATA: Cannot parse ${vaultPath} for an unknown reason`)\n  }\n\n  // handle scenario for comma separated keys - for use with key rotation\n  // example: DOTENV_KEY=\"dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=prod,dotenv://:key_7890@dotenv.org/vault/.env.vault?environment=prod\"\n  const keys = _dotenvKey(options).split(',')\n  const length = keys.length\n\n  let decrypted\n  for (let i = 0; i < length; i++) {\n    try {\n      // Get full key\n      const key = keys[i].trim()\n\n      // Get instructions for decrypt\n      const attrs = _instructions(result, key)\n\n      // Decrypt\n      decrypted = DotenvModule.decrypt(attrs.ciphertext, attrs.key)\n\n      break\n    } catch (error) {\n      // last key\n      if (i + 1 >= length) {\n        throw error\n      }\n      // try next key\n    }\n  }\n\n  // Parse decrypted .env string\n  return DotenvModule.parse(decrypted)\n}\n\nfunction _log (message) {\n  console.log(`[dotenv@${version}][INFO] ${message}`)\n}\n\nfunction _warn (message) {\n  console.log(`[dotenv@${version}][WARN] ${message}`)\n}\n\nfunction _debug (message) {\n  console.log(`[dotenv@${version}][DEBUG] ${message}`)\n}\n\nfunction _dotenvKey (options) {\n  // prioritize developer directly setting options.DOTENV_KEY\n  if (options && options.DOTENV_KEY && options.DOTENV_KEY.length > 0) {\n    return options.DOTENV_KEY\n  }\n\n  // secondary infra already contains a DOTENV_KEY environment variable\n  if (process.env.DOTENV_KEY && process.env.DOTENV_KEY.length > 0) {\n    return process.env.DOTENV_KEY\n  }\n\n  // fallback to empty string\n  return ''\n}\n\nfunction _instructions (result, dotenvKey) {\n  // Parse DOTENV_KEY. Format is a URI\n  let uri\n  try {\n    uri = new URL(dotenvKey)\n  } catch (error) {\n    if (error.code === 'ERR_INVALID_URL') {\n      throw new Error('INVALID_DOTENV_KEY: Wrong format. Must be in valid uri format like dotenv://:key_1234@dotenv.org/vault/.env.vault?environment=development')\n    }\n\n    throw error\n  }\n\n  // Get decrypt key\n  const key = uri.password\n  if (!key) {\n    throw new Error('INVALID_DOTENV_KEY: Missing key part')\n  }\n\n  // Get environment\n  const environment = uri.searchParams.get('environment')\n  if (!environment) {\n    throw new Error('INVALID_DOTENV_KEY: Missing environment part')\n  }\n\n  // Get ciphertext payload\n  const environmentKey = `DOTENV_VAULT_${environment.toUpperCase()}`\n  const ciphertext = result.parsed[environmentKey] // DOTENV_VAULT_PRODUCTION\n  if (!ciphertext) {\n    throw new Error(`NOT_FOUND_DOTENV_ENVIRONMENT: Cannot locate environment ${environmentKey} in your .env.vault file.`)\n  }\n\n  return { ciphertext, key }\n}\n\nfunction _vaultPath (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n\n  if (options && options.path && options.path.length > 0) {\n    dotenvPath = options.path\n  }\n\n  // Locate .env.vault\n  return dotenvPath.endsWith('.vault') ? dotenvPath : `${dotenvPath}.vault`\n}\n\nfunction _resolveHome (envPath) {\n  return envPath[0] === '~' ? path.join(os.homedir(), envPath.slice(1)) : envPath\n}\n\nfunction _configVault (options) {\n  _log('Loading env from encrypted .env.vault')\n\n  const parsed = DotenvModule._parseVault(options)\n\n  let processEnv = process.env\n  if (options && options.processEnv != null) {\n    processEnv = options.processEnv\n  }\n\n  DotenvModule.populate(processEnv, parsed, options)\n\n  return { parsed }\n}\n\nfunction configDotenv (options) {\n  let dotenvPath = path.resolve(process.cwd(), '.env')\n  let encoding = 'utf8'\n  const debug = Boolean(options && options.debug)\n\n  if (options) {\n    if (options.path != null) {\n      dotenvPath = _resolveHome(options.path)\n    }\n    if (options.encoding != null) {\n      encoding = options.encoding\n    }\n  }\n\n  try {\n    // Specifying an encoding returns a string instead of a buffer\n    const parsed = DotenvModule.parse(fs.readFileSync(dotenvPath, { encoding }))\n\n    let processEnv = process.env\n    if (options && options.processEnv != null) {\n      processEnv = options.processEnv\n    }\n\n    DotenvModule.populate(processEnv, parsed, options)\n\n    return { parsed }\n  } catch (e) {\n    if (debug) {\n      _debug(`Failed to load ${dotenvPath} ${e.message}`)\n    }\n\n    return { error: e }\n  }\n}\n\n// Populates process.env from .env file\nfunction config (options) {\n  const vaultPath = _vaultPath(options)\n\n  // fallback to original dotenv if DOTENV_KEY is not set\n  if (_dotenvKey(options).length === 0) {\n    return DotenvModule.configDotenv(options)\n  }\n\n  // dotenvKey exists but .env.vault file does not exist\n  if (!fs.existsSync(vaultPath)) {\n    _warn(`You set DOTENV_KEY but you are missing a .env.vault file at ${vaultPath}. Did you forget to build it?`)\n\n    return DotenvModule.configDotenv(options)\n  }\n\n  return DotenvModule._configVault(options)\n}\n\nfunction decrypt (encrypted, keyStr) {\n  const key = Buffer.from(keyStr.slice(-64), 'hex')\n  let ciphertext = Buffer.from(encrypted, 'base64')\n\n  const nonce = ciphertext.slice(0, 12)\n  const authTag = ciphertext.slice(-16)\n  ciphertext = ciphertext.slice(12, -16)\n\n  try {\n    const aesgcm = crypto.createDecipheriv('aes-256-gcm', key, nonce)\n    aesgcm.setAuthTag(authTag)\n    return `${aesgcm.update(ciphertext)}${aesgcm.final()}`\n  } catch (error) {\n    const isRange = error instanceof RangeError\n    const invalidKeyLength = error.message === 'Invalid key length'\n    const decryptionFailed = error.message === 'Unsupported state or unable to authenticate data'\n\n    if (isRange || invalidKeyLength) {\n      const msg = 'INVALID_DOTENV_KEY: It must be 64 characters long (or more)'\n      throw new Error(msg)\n    } else if (decryptionFailed) {\n      const msg = 'DECRYPTION_FAILED: Please check your DOTENV_KEY'\n      throw new Error(msg)\n    } else {\n      console.error('Error: ', error.code)\n      console.error('Error: ', error.message)\n      throw error\n    }\n  }\n}\n\n// Populate process.env with parsed values\nfunction populate (processEnv, parsed, options = {}) {\n  const debug = Boolean(options && options.debug)\n  const override = Boolean(options && options.override)\n\n  if (typeof parsed !== 'object') {\n    throw new Error('OBJECT_REQUIRED: Please check the processEnv argument being passed to populate')\n  }\n\n  // Set process.env\n  for (const key of Object.keys(parsed)) {\n    if (Object.prototype.hasOwnProperty.call(processEnv, key)) {\n      if (override === true) {\n        processEnv[key] = parsed[key]\n      }\n\n      if (debug) {\n        if (override === true) {\n          _debug(`\"${key}\" is already defined and WAS overwritten`)\n        } else {\n          _debug(`\"${key}\" is already defined and was NOT overwritten`)\n        }\n      }\n    } else {\n      processEnv[key] = parsed[key]\n    }\n  }\n}\n\nconst DotenvModule = {\n  configDotenv,\n  _configVault,\n  _parseVault,\n  config,\n  decrypt,\n  parse,\n  populate\n}\n\nmodule.exports.configDotenv = DotenvModule.configDotenv\nmodule.exports._configVault = DotenvModule._configVault\nmodule.exports._parseVault = DotenvModule._parseVault\nmodule.exports.config = DotenvModule.config\nmodule.exports.decrypt = DotenvModule.decrypt\nmodule.exports.parse = DotenvModule.parse\nmodule.exports.populate = DotenvModule.populate\n\nmodule.exports = DotenvModule\n", "import { documentClient, ses, sqs } from './common/db/aws'\n\nconst TABLE_NAME = 'YourDynamoDBTableName'\nconst QUEUE_URL = 'YourSQSQueueURL'\nconst FROM_EMAIL = 'your-verified-email@example.com'\n\ninterface Link {\n    userEmail: string;\n    id: string;\n}\n\ninterface Message {\n    userEmail: string;\n    linkId: string;\n    message: string;\n}\n\nexport const deactivateLinks = async (event: any): Promise<void> => {\n    const currentTime = new Date()\n    const timeFrames: { [key: string]: Date } = {\n        '30 minutes': new Date(currentTime.getTime() - (60 * 60 * 1000 / 2)),\n        '1 day': new Date(currentTime.getTime() - (24 * 60 * 60 * 1000)),\n        '3 days': new Date(currentTime.getTime() - (3 * 24 * 60 * 60 * 1000)),\n        '7 days': new Date(currentTime.getTime() - (7 * 24 * 60 * 60 * 1000)),\n    }\n\n    const entries: [string, Date][] = [];\n\n    for (const key in timeFrames) {\n        if (timeFrames.hasOwnProperty(key)) {\n            entries.push([key, timeFrames[key]]);\n        }\n    }\n\n    for (const [timeFrameKey, timeFrameValue] of entries) {\n        const params = {\n            TableName: TABLE_NAME,\n            FilterExpression: 'expiresAt = :timeFrameVal',\n            ExpressionAttributeValues: { ':timeFrameVal': timeFrameValue.getTime() },\n        }\n        const expiredLinks = await documentClient.scan(params).promise()\n        for (const link of expiredLinks.Items as Link[]) {\n            const sqsParams = {\n                MessageBody: JSON.stringify({\n                    userEmail: link.userEmail,\n                    linkId: link.id,\n                    message: `Your link has been deactivated after ${timeFrameKey}.`,\n                }),\n                QueueUrl: QUEUE_URL,\n            }\n            await sqs.sendMessage(sqsParams).promise()\n        }\n    }\n}\n\n\nexport const processQueueMessages = async (event: any): Promise<void> => {\n    for (const record of event.Records) {\n        const message = JSON.parse(record.body) as Message\n        const emailParams = {\n            Source: FROM_EMAIL,\n            Destination: {ToAddresses: [message.userEmail]},\n            Message: {\n                Body: {\n                    Text: {\n                        Charset: \"UTF-8\",\n                        Data: message.message,\n                    },\n                },\n                Subject: {\n                    Charset: 'UTF-8',\n                    Data: 'Link Deactivation Notice'\n                },\n            },\n        }\n\n        await ses.sendEmail(emailParams).promise()\n    }\n}\n", "import * as dotenv from \"dotenv\"\n\ndotenv.config()\nconst ACCESS_ID_TOKEN = process.env.ACCESS_ID_TOKEN!\nconst SECRET_TOKEN = process.env.SECRET_TOKEN!\nconst JWT_SECRET = process.env.JWT_SECRET!\nconst EXPIRES_IN = process.env.EXPIRES_IN!\nconst SQS_URL = process.env.SQS_URL!\nconst REFRESH_TOKEN_SECRET = process.env.REFRESH_TOKEN_SECRET!\nexport { JWT_SECRET, REFRESH_TOKEN_SECRET, SQS_URL, EXPIRES_IN, ACCESS_ID_TOKEN, SECRET_TOKEN }\n", "import { ACCESS_ID_TOKEN, SECRET_TOKEN } from '../env'\nimport * as AWS from 'aws-sdk'\nconst sqs = new AWS.SQS({\n    apiVersion: '2012-11-05',\n    region: 'us-west-1',\n    credentials: {\n        accessKeyId: ACCESS_ID_TOKEN,\n        secretAccessKey: SECRET_TOKEN\n    },\n});\nAWS.config.update({\n    accessKeyId: ACCESS_ID_TOKEN,\n    secretAccessKey: SECRET_TOKEN,\n    region: 'us-west-1',\n});\n\n//{\n//     region: \"us-west-1\",\n//     credentials: ACCESS_ID_TOKEN,\n//     endpoint: 'http://localhost:4566/'\n// }\n\n\nconst ses = new AWS.SES();\n\nconst documentClient = new AWS.DynamoDB.DocumentClient({\n    region: \"localhost\",\n    credentials: {\n        accessKeyId: ACCESS_ID_TOKEN,\n        secretAccessKey: SECRET_TOKEN\n    },\n    endpoint: 'http://localhost:8000/'\n})\n\nconst Dynamo = {\n    async scan(TableName) {\n        const params = {\n            TableName\n        };\n\n        const data = await documentClient.scan(params).promise();\n\n        if (!data || !data.Items) {\n            throw Error(`There was an error scanning the table ${TableName}`);\n        }\n\n        return data.Items;\n    },\n\n    async query(key, value, TableName) {\n        const params = {\n            TableName,\n            KeyConditionExpression: '#k = :v',\n            ExpressionAttributeNames: {\n                '#k': key\n            },\n            ExpressionAttributeValues: {\n                ':v': value\n            }\n        };\n\n        const data = await documentClient.query(params).promise();\n\n        if (!data || !data.Items) {\n            throw Error(`There was an error querying the table ${TableName}`);\n        }\n\n        return data.Items;\n    },\n\n    async update(key, value, updateKey, updateValue, TableName) {\n        const params = {\n            TableName,\n            Key: {\n                [key]: value\n            },\n            ExpressionAttributeNames: {\n                '#k': updateKey\n            },\n            ExpressionAttributeValues: {\n                ':v': updateValue\n            },\n            UpdateExpression: 'SET #k = :v',\n            ReturnValues: 'ALL_NEW'\n        };\n\n        const data = await documentClient.update(params).promise();\n\n        if (!data) {\n            throw Error(`There was an error updating the item in table ${TableName}`);\n        }\n\n        return data.Attributes;\n    },\n    async get (searchParam, value, TableName) {\n        const params = {\n            TableName,\n            Key: {\n                [searchParam]: value,\n            },\n        }\n        const data = await documentClient.get(params).promise()\n        console.log(data,\"data\")\n        if (data.Item) {\n            return data.Item\n        }\n        return {\n            \"result\": \"No item found\"\n        }\n    },\n    async delete (searchParam, value, TableName) {\n        const params = {\n            TableName,\n            Key: {\n                [searchParam]: value,\n            },\n        }\n        const data = await documentClient.delete(params).promise()\n        if (!data) {\n            throw Error(`There was an error deleting ${value} from ${TableName}`)\n        }\n        return {\n            \"result\": \"Successfully deleted\"\n        }\n    },\n    async write(data, TableName) {\n        const params = {\n            TableName,\n            Item: data,\n        };\n        console.log({data},\"params\")\n        await documentClient.put(params).promise();\n        return data;\n    }\n}\n\nexport {\n    Dynamo,\n    documentClient,\n    sqs,\n    ses\n}\n"],
  "mappings": "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",
  "names": ["require_package", "__commonJSMin", "exports", "module", "require_main", "__commonJSMin", "exports", "module", "fs", "path", "os", "crypto", "packageJson", "version", "LINE", "parse", "src", "obj", "lines", "match", "key", "value", "maybeQuote", "_parseVault", "options", "vaultPath", "_vaultPath", "result", "DotenvModule", "keys", "_dotenvKey", "length", "decrypted", "i", "attrs", "_instructions", "error", "_log", "message", "_warn", "_debug", "dotenvKey", "uri", "environment", "environmentKey", "ciphertext", "dotenvPath", "_resolveHome", "envPath", "_configVault", "parsed", "processEnv", "configDotenv", "encoding", "debug", "e", "config", "decrypt", "encrypted", "keyStr", "nonce", "authTag", "aesgcm", "isRange", "invalidKeyLength", "decryptionFailed", "msg", "populate", "override", "deactivated_exports", "__export", "deactivateLinks", "processQueueMessages", "__toCommonJS", "dotenv", "ACCESS_ID_TOKEN", "SECRET_TOKEN", "JWT_SECRET", "EXPIRES_IN", "SQS_URL", "REFRESH_TOKEN_SECRET", "AWS", "sqs", "ACCESS_ID_TOKEN", "SECRET_TOKEN", "ses", "documentClient", "TABLE_NAME", "QUEUE_URL", "FROM_EMAIL", "deactivateLinks", "event", "__async", "currentTime", "timeFrames", "entries", "key", "timeFrameKey", "timeFrameValue", "params", "expiredLinks", "documentClient", "link", "sqsParams", "sqs", "processQueueMessages", "record", "message", "emailParams", "ses"]
}
